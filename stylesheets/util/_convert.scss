@use 'sass:math';

@use "breakpoint/settings";

//////////////////////////////
// Converts the input value to Base EMs
//////////////////////////////
//TODO: this function will always assume 16px = 1, is that the right thing?
//I think it's primarily used to put width/heigh queries in em, which are based on browser base font size, typically
//16px, so might be the right thing after all
@function to-base-em($value) {
  $value-unit: unit($value);

  // Will convert relative EMs into root EMs.
  @if settings.get('base font size') and type-of(settings.get('base font size')) == 'number' and $value-unit == 'em' {
    $base-unit: unit(settings.get('base font size'));

    //TODO: There are other units that may be relevant here, perhaps find a way to generalize
    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {
      @return math.div(base-conversion($value), base-conversion(settings.get('base font size'))) * 1em;
    }
    @else {
      @warn '#{settings.get("base font size")} is not set in valid units for font size!';
      @return false;
    }
  }
  @else {
    @return base-conversion($value);
  }
}

@function base-conversion($value) {
  $unit: unit($value);

  @if $unit == 'px' {
    @return math.div($value, 16px) * 1em;
  }
  @else if $unit == '%' {
    @return math.div($value, 100%) * 1em;
  }
  @else if $unit == 'em' {
    @return $value;
  }
  @else if $unit == 'pt' {
    @return math.div($value, 12pt) * 1em;
  }
  @else {
    @return $value;
//    @warn 'Everything is terrible! What have you done?!';
  }
}
